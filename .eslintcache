[{"E:\\Game\\my-app\\src\\index.js":"1","E:\\Game\\my-app\\src\\App.js":"2","E:\\Game\\my-app\\src\\reportWebVitals.js":"3","E:\\Game\\my-app\\src\\Component\\Main.js":"4","E:\\Game\\my-app\\src\\Component\\CreateMatch.js":"5","E:\\Game\\my-app\\src\\Component\\Ball.js":"6","E:\\Game\\my-app\\src\\Component\\ScoreBoard.js":"7","E:\\Game\\my-app\\src\\Component\\StateFull.js":"8","E:\\Game\\my-app\\src\\Component\\Management.js":"9"},{"size":548,"mtime":1610424997488,"results":"10","hashOfConfig":"11"},{"size":871,"mtime":1611040206692,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":956,"mtime":1610426461179,"results":"14","hashOfConfig":"11"},{"size":7666,"mtime":1611049561368,"results":"15","hashOfConfig":"11"},{"size":5449,"mtime":1610600699854,"results":"16","hashOfConfig":"11"},{"size":23406,"mtime":1611060460445,"results":"17","hashOfConfig":"11"},{"size":897,"mtime":1611036382520,"results":"18","hashOfConfig":"11"},{"size":5423,"mtime":1611123281950,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ffkocn",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"E:\\Game\\my-app\\src\\index.js",[],["45","46"],"E:\\Game\\my-app\\src\\App.js",[],"E:\\Game\\my-app\\src\\reportWebVitals.js",[],"E:\\Game\\my-app\\src\\Component\\Main.js",["47"],"import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <>\r\n      <div className=\"col-md-8 mx-auto mt-2\">\r\n        <Card className=\"text-center\">\r\n          <Card.Header>Match Details</Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>\r\n              {\" \"}\r\n              <Link to={\"/createMatch\"}>Create Match </Link>{\" \"}\r\n            </Card.Title>\r\n            <Card.Title>MatchId</Card.Title>\r\n            <Card.Title>Match Location</Card.Title>\r\n            <Card.Title>Match Name</Card.Title>\r\n            <Card.Title>Team Name1</Card.Title>\r\n            <Card.Title>Team Name2</Card.Title>\r\n            <Card.Title>Match Type</Card.Title>\r\n          </Card.Body>\r\n          <Card.Footer className=\"text-muted\"></Card.Footer>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","E:\\Game\\my-app\\src\\Component\\CreateMatch.js",["48","49"],"import React, { useEffect, useState } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\nimport ScoreBoard from './ScoreBoard'\r\nimport { Link } from \"react-router-dom\";\r\nfunction CreateMatch(props) {\r\n  const [team_name1, setTeam] = useState(\"\");\r\n  const [team_name2, setTeam2] = useState(\"\");\r\n  const [list, setList] = useState([]);\r\n  const [photo, SetFileName] = useState(\"\");\r\n  const [team_id, setTeamId] = useState(\"\");\r\n  const [role, setRole] = useState(\"\");\r\n  const [player_name, setPlayerName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function getList() {\r\n      try {\r\n        let res = await axios.get(\r\n          `https://fast-atoll-73668.herokuapp.com/fetchTeam`\r\n        );\r\n        console.log(res.data.message);\r\n        let list = res.data.message;\r\n        setList(list);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    getList();\r\n  }, []);\r\n\r\n  function addTeam(team_name) {\r\n    try {\r\n      console.log(team_name);\r\n      fetch(`https://fast-atoll-73668.herokuapp.com/createTeam`, {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          team_name,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n\r\n          console.log(data.details);\r\n          if (data.statusCode === 200) {\r\n            let data1 = {\r\n              _id: data.details._id,\r\n              team_name: data.details.team_name,\r\n            };\r\n            setList((preValue) => {\r\n              return [...preValue, data1];\r\n            });\r\n            alert(data.message);\r\n            setTeam(\"\");\r\n            setTeam2(\"\");\r\n          } else {\r\n            alert(data.message);\r\n          }\r\n          //console.log(data1)\r\n        })\r\n        .catch((e) => console.log(e));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    // console.log(team_name1)\r\n    addTeam(team_name1);\r\n  };\r\n  const handleSubmit2 = () => {\r\n    //  console.log(team_name2);\r\n    addTeam(team_name2);\r\n  };\r\n  //radio Button for choose team_id\r\n  const checkboxHandler = (e) => {\r\n    setTeamId(e.target.value);\r\n    //console.log(e.target.value);\r\n    // alert(e.target.value);\r\n  };\r\n  //selelct for role like batsman....\r\n  const selectHandler = (e) => {\r\n    setRole(e.target.value);\r\n    // alert(e.target.value);\r\n  };\r\n  //image handle\r\n  const formHandler = (e) => {\r\n    SetFileName(e.target.files[0]);\r\n    console.log(e.target.files[0]);\r\n  };\r\n  //submit player details\r\n  const submitPlayer = () => {\r\n    console.log(photo, role, team_id, player_name);\r\n    async function playerHandler() {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"photo\", photo);\r\n        formData.append(\"team_id\", team_id);\r\n        formData.append(\"player_name\", player_name);\r\n        formData.append(\"role\", role);\r\n\r\n        let result = await axios({\r\n          method: \"post\",\r\n          url: \"https://fast-atoll-73668.herokuapp.com/addPlayer\",\r\n          data: formData,\r\n          headers: {\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            \"content-type\": \"multipart/form-data\",\r\n          },\r\n        });\r\n        console.log(result.data.message);\r\n        alert(result.data.message);\r\n      } catch (e) {\r\n        console.log(e);\r\n        if (e.response) {\r\n          console.log(e.response.data.message);\r\n          alert(e.response.data.message);\r\n        }\r\n      }\r\n    }\r\n    playerHandler();\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-md-6 mt-3 mx-auto\">\r\n     {/* // <ScoreBoard value={list}/> */}\r\n       <Link to={\"/scoreboard\"}>Go to the ScoreBoard </Link>\r\n      <Card className=\"text-center\">\r\n        <Card.Header className=\"bg-primary\">Create Team </Card.Header>\r\n        <Card.Body>\r\n          <Form>\r\n            <Form.Label>Enter Team Name 1</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter Team Name 1\"\r\n              value={team_name1}\r\n              onChange={(e) => setTeam(e.target.value)}\r\n            />\r\n            <br />\r\n            <Button variant=\"primary\" onClick={() => handleSubmit()}>\r\n              Create Team\r\n            </Button>\r\n            <br />\r\n            {/* <Form.Label className=\"mt-3\">Enter Team Name 2</Form.Label> */}\r\n            {/* <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter Team Name 2\"\r\n              value={team_name2}\r\n              onChange={(e) => setTeam2(e.target.value)}\r\n            />\r\n            <br />\r\n            <Button variant=\"primary\" onClick={() => handleSubmit2()}>\r\n              Create Team\r\n            </Button> */}\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n      {/* Team Name Fetch from Api */}\r\n\r\n      <div className=\"m-3\">\r\n        <h5>Your Team is</h5>\r\n        <Form.Group>\r\n          <Form.Control\r\n            as=\"select\"\r\n            //   onChange={selectHandler}\r\n          >\r\n            {\" \"}\r\n            <option>Team Name</option>\r\n            {list.map((element, index) => (\r\n              <option key={index} value={element.team_name} name={element._id}>\r\n                {element.team_name}\r\n              </option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form.Group>\r\n      </div>\r\n      {/* Add a player for Team */}\r\n\r\n      <div className=\"mt-5\">\r\n        <Card className=\"text-center \">\r\n          <Card.Header className=\"bg-info\">Add Player </Card.Header>\r\n          <Card.Body>\r\n            <Form.Group controlId=\"formBasicCheckbox\">\r\n              <p>Select Team Name Add Player</p>\r\n              <div className=\"row\">\r\n                {list.map((element, index) => (\r\n                  <Form.Check\r\n                    key={index}\r\n                    type=\"radio\"\r\n                    aria-label=\"radio 1\"\r\n                    name=\"male\"\r\n                    inline\r\n                    label={element.team_name}\r\n                    // value={element.team_name}\r\n                    value={element._id}\r\n                    onChange={checkboxHandler}\r\n                  />\r\n                ))}\r\n\r\n                <br />\r\n              </div>\r\n              <br />\r\n              <br />\r\n              <h5>Choose role</h5>\r\n\r\n              <Form.Control as=\"select\" onChange={selectHandler}>\r\n                {\" \"}\r\n                <option value=\"\">Choose Role...</option>\r\n                <option value=\"Batsman\">Batsman</option>\r\n                <option value=\"Bowler\">Bowler</option>\r\n                <option value=\"Allrounder\">Allrounder</option>\r\n              </Form.Control>\r\n\r\n              <Form.Label>Add Player </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Player Name\"\r\n                onChange={(e) => setPlayerName(e.target.value)}\r\n              />\r\n              <br />\r\n              <Form.Group>\r\n                <Form.File\r\n                  className=\"position-relative\"\r\n                  required\r\n                  name=\"file\"\r\n                  onChange={formHandler}\r\n                  label=\"add a pic\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Button variant=\"primary\" onClick={() => submitPlayer()}>\r\n                Add Player\r\n              </Button>\r\n            </Form.Group>\r\n          </Card.Body>\r\n          <Card.Footer className=\"text-muted\"></Card.Footer>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateMatch;\r\n","E:\\Game\\my-app\\src\\Component\\Ball.js",["50"],"import React, { useState } from \"react\";\r\n//import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nconst Ball = () => {\r\n  let [score, setScore] = useState(0);\r\n  let [ball, setBall] = useState(6);\r\n  let [lastClicked, setLastClicked] = useState([]);\r\n\r\n  const clickHandler = (e) => {\r\n    if (ball === 0) {\r\n      alert(\"Over is ended\");\r\n      return;\r\n    }\r\n    ball--;\r\n    let value = parseInt(e.target.value);\r\n    //setLastClicked(value)\r\n    setScore(score + value);\r\n    setBall(ball);\r\n    setLastClicked((preValue) => {\r\n      return [...preValue, value];\r\n    });\r\n    //console.log(ball)\r\n  };\r\n  const redoHandler = (e) => {};\r\n  const undoHandler = () => {\r\n    let countBall = parseInt(ball);\r\n    let getScore = parseInt(score);\r\n    //console.log(countBall,getScore,lastClicked)\r\n    //setBall(parseInt(countBall) + 1);\r\n    //setScore(getScore-lastClicked.pop() );\r\n    console.log(lastClicked);\r\n    //console.log(lastClicked.pop());\r\n    let lastValue = lastClicked.pop();\r\n    console.log(lastValue);\r\n    setScore(getScore - lastValue);\r\n    //console.log(countBall,getScore,lastClicked)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-5 mt-3 mx-auto\">\r\n        <div className=\"input-group mb-3\">\r\n          <input type=\"text\" className=\"form-control\" value={score} readOnly />\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\">BallLeft</span>\r\n            <span className=\"input-group-text\">{ball}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <table className=\"table\">\r\n          <tbody>\r\n            <tr></tr>\r\n            <tr>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-info p-2\"\r\n                  value=\"1\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  1\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-info\"\r\n                  value=\"2\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  2\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-info\"\r\n                  value=\"3\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  3\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-success\"\r\n                  value=\"4\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  4\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-danger\"\r\n                  value=\"6\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  6\r\n                </button>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-danger\"\r\n                  value=\"\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  out\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-info\"\r\n                  value=\"1\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  wide\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-info\"\r\n                  value=\"1\"\r\n                  onClick={(e) => {\r\n                    clickHandler(e);\r\n                  }}\r\n                >\r\n                  no ball\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-info\"\r\n                  value=\"\"\r\n                  onClick={(e) => {\r\n                    redoHandler(e);\r\n                  }}\r\n                >\r\n                  Redo\r\n                </button>\r\n              </td>\r\n              <td>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-info\"\r\n                  value=\"\"\r\n                  onClick={() => {\r\n                    undoHandler();\r\n                  }}\r\n                >\r\n                  Undo\r\n                </button>\r\n              </td>\r\n            </tr>\r\n            {ball ? null :\r\n              <tr className=\"text-center\">\r\n                <td>\r\n                  <button type=\"button\" className=\"btn btn-info\" value=\"\">\r\n                    Submit\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Ball;\r\n","E:\\Game\\my-app\\src\\Component\\ScoreBoard.js",["51","52","53","54"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nfunction ScoreBoard(props) {\r\n  const [list, setList] = useState([]);\r\n  const [loading, setLoading] = useState(\"loading\");\r\n  const [team1, setTeam1] = useState([]);\r\n  const [team2, setTeam2] = useState([]);\r\n  const [list1, setList1] = useState([]);\r\n  const [list2, setList2] = useState([]);\r\n  let [batsman, setBatsman] = useState([]); //slected batsman in selecthandler\r\n  const [over, setOver] = useState(0); //total no of over limit\r\n  let [bowler, setBowler] = useState(\"\");\r\n  const [count, setCount] = useState(0);\r\n  let [balltracker1, setBallTracker1] = useState(0); //total run for batsman1\r\n  let [balltracker2, setBallTracker2] = useState(0); //total run for batsman2\r\n  const [strike, setStrike] = useState(\"strike\");\r\n  const [nonstrike, setNonStrike] = useState(\"\");\r\n  let [totalBall, setTotalBall] = useState(0); //count the total ball of inning\r\n  let [four1, setFour1] = useState(0); //count four for batsman1\r\n  let [six1, setSix1] = useState(0); //count six for batsman1\r\n  let [four2, setFour2] = useState(0); //count four for batsman2\r\n  let [six2, setSix2] = useState(0); //count six for batsman2\r\n  let [batsman1, setBatsman1] = useState(); //batsman name 1 in table\r\n  let [batsman2, setBatsman2] = useState(); //batsman 2 in table\r\n  let [redoCount, setRedoCount] = useState(0);\r\n  let [countBall1, setCountBall1] = useState(0); //count the frequncy of ball player1\r\n  let [countBall2, setCountBall2] = useState(0); //count the frequncy of ball player1\r\n  let [id, setTeamId] = useState([]); //store the playerid\r\n  let [matchBall, setmatchBall] = useState(0); //count the baal of whole innning\r\n  let [location, setLocation] = useState(\"\");\r\n  let [created, setCreated] = useState(false);\r\n  const [showButton, setShowButton] = useState(false);\r\n  let [countBowlerFq, setBowlerFreq] = useState([]);\r\n  let [reset, setReset] = useState(1); //swapping occur multiple times\r\n\r\n  //ball state\r\n  let [score, setScore] = useState(0);\r\n  let [ball, setBall] = useState(6);\r\n  let [lastClicked, setLastClicked] = useState([]); //for undo\r\n  // fetched the team\r\n  useEffect(() => {\r\n    async function getTeam() {\r\n      try {\r\n        let res = await axios.get(\r\n          `https://fast-atoll-73668.herokuapp.com/fetchTeam`\r\n        );\r\n        // console.log(res.data.message[0]);\r\n        // console.log(res.data.message[1])\r\n        setList(res.data.message);\r\n        setTeam1(res.data.message[0]);\r\n        setTeam2(res.data.message[1]);\r\n        setLoading(\" \");\r\n        //    let list = res.data.message;\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    getTeam();\r\n  }, []);\r\n  //get player list of team 1\r\n  async function getList(team_id) {\r\n    try {\r\n      console.log(team_id);\r\n      fetch(`https://fast-atoll-73668.herokuapp.com/getPlayerList`, {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          team_id,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setList1(data.player_list);\r\n          console.log(data);\r\n        })\r\n        .catch((e) => console.log(e));\r\n    } catch (e) {}\r\n  }\r\n  // click checkbox for get player name called the upper function\r\n  const checkBoxHandler = (e) => {\r\n    //   alert(e.target.value);\r\n    let team_id = e.target.value;\r\n    getList(team_id);\r\n    setTeamId((prev) => {\r\n      return [...prev, team_id];\r\n    });\r\n  };\r\n  //   for swapping team send id of first team getlist(1)\r\n  async function getList2(team_id) {\r\n    try {\r\n      console.log(team_id);\r\n      fetch(`https://fast-atoll-73668.herokuapp.com/getPlayerList`, {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          team_id,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setList2(data.player_list);\r\n          console.log(data);\r\n        })\r\n        .catch((e) => console.log(e));\r\n    } catch (e) {}\r\n  }\r\n\r\n  // click checkbox for get player name called the upper function\r\n  const checkBox2Handler = (e) => {\r\n    //alert(e.target.value);\r\n    let team_id = e.target.value;\r\n    setTeamId((prev) => {\r\n      return [...prev, team_id];\r\n    });\r\n    fetch(`https://fast-atoll-73668.herokuapp.com/getPlayerList`, {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        team_id,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setList2(data.player_list);\r\n        console.log(data);\r\n      })\r\n      .catch((e) => console.log(e));\r\n  };\r\n  //select 3 player strike,non strike,bowler\r\n  const multiSelect = (e) => {\r\n    //alert(e.target.value);\r\n    let l = batsman.length;\r\n    let val = e.target.value;\r\n    if (l > 1) {\r\n      console.log(l);\r\n\r\n      alert(\"only two batsman can selected\");\r\n      return false;\r\n    }\r\n    setBatsman((preValue) => {\r\n      return [...preValue, val];\r\n    });\r\n    console.log(batsman.length);\r\n  };\r\n\r\n  const startMatch = () => {\r\n    setShowButton(true);\r\n    let l = batsman.length;\r\n    if (l < 1) {\r\n      alert(\"plz add two batsman on strike\");\r\n      return;\r\n    }\r\n    setBatsman1(batsman[0]);\r\n    setBatsman2(batsman[1]);\r\n    if (bowler === \"\") {\r\n      alert(\"plz select bowlwer\");\r\n      return;\r\n    }\r\n    if (over === 0 || over === \"\") {\r\n      alert(\"plaz select over\");\r\n      return;\r\n    }\r\n  };\r\n  //over handle\r\n\r\n  const overHandler = (e) => {\r\n    alert(e.target.value);\r\n    let v = parseInt(e.target.value);\r\n    setOver(v);\r\n  };\r\n  //handle the bowler name\r\n  const multiSelectBowler = (e) => {\r\n    alert(e.target.value);\r\n    alert(\"hii\");\r\n    setBowler(e.target.value);\r\n    setBowlerFreq((pre) => {\r\n      return [...pre, e.target.value];\r\n    });\r\n  };\r\n  //count the frequncy of each bowler\r\n  const overcount = () => {\r\n    //console.log(countBowlerFq)\r\n    var result = {};\r\n    var freq = {};\r\n    for (let i = 0; i < countBowlerFq.length; i++) {\r\n      if (!freq[countBowlerFq[i]]) freq[countBowlerFq[i]] = 0;\r\n      freq[countBowlerFq[i]]++;\r\n    }\r\n    for (let i = 0; i < countBowlerFq.length; i++) {\r\n      if (freq[countBowlerFq[i]] > 0) {\r\n        console.log(countBowlerFq[i], freq[countBowlerFq[i]]);\r\n        result[countBowlerFq[i]] = freq[countBowlerFq[i]];\r\n        freq[countBowlerFq[i]] = 0;\r\n      }\r\n    }\r\n    console.log(result);\r\n  };\r\n  //ball tracker\r\n\r\n  const clickHandler = (e) => {\r\n    let l = batsman.length;\r\n    if (l < 2) {\r\n      alert(\"plz add two batsman on strike\");\r\n      return;\r\n    }\r\n    //  if(over*6===matchBall){\r\n    //     alert(\"match is ended  ... \");\r\n    //     return false\r\n\r\n    //  }\r\n    // if (Math.floor(totalBall / 6) === Math.floor(over) ) {\r\n    if (matchBall === over * 12) {\r\n      alert(\"match is over\");\r\n      return;\r\n    }\r\n    if (over * 6 === matchBall && reset === 1) {\r\n      alert(\"first inning is over ...swapping the player ... \");\r\n      let rev = id.reverse();\r\n      reset = 0;\r\n      setReset(reset);\r\n      //console.log(rev[0])\r\n      getList(rev[0]);\r\n      getList2(rev[1]);\r\n      batsman1 = \"\";\r\n\r\n      setBatsman1(batsman1);\r\n      setBatsman2(batsman1);\r\n      batsman = [];\r\n      setBatsman(batsman);\r\n      setBowler(\"\");\r\n      setScore(0);\r\n\r\n      four1 = 0;\r\n      setFour1(four1);\r\n      four2 = 0;\r\n      setFour2(four2);\r\n      six1 = 0;\r\n      setSix1(six1);\r\n      six2 = 0;\r\n      setSix2(six2);\r\n      balltracker1 = 0;\r\n      setBallTracker1(balltracker1);\r\n      balltracker2 = 0;\r\n      setBallTracker2(balltracker2);\r\n      countBall1 = 0;\r\n      setCountBall1(countBall1);\r\n      countBall2 = 0;\r\n      setCountBall2(countBall2);\r\n\r\n      totalBall = 0;\r\n      setTotalBall(totalBall);\r\n\r\n      // setOver(0)\r\n      //reset the all previous details\r\n\r\n      return false;\r\n    }\r\n\r\n    if (ball === 0) {\r\n      alert(\"Over is ended\");\r\n      ball = 6;\r\n      setBall(ball);\r\n      setLastClicked([]);\r\n      setBowler(\"\");\r\n\r\n      return;\r\n    }\r\n    totalBall++;\r\n    matchBall++;\r\n    setmatchBall(matchBall);\r\n    setTotalBall(totalBall);\r\n    ball--;\r\n    let value = parseInt(e.target.value);\r\n    //setLastClicked(value)\r\n    setScore(score + value);\r\n    setBall(ball);\r\n    //for undo\r\n    setLastClicked((preValue) => {\r\n      return [...preValue, value];\r\n    });\r\n    if (bowler === \"\") {\r\n      alert(\"plz select bowlwer\");\r\n      return;\r\n    }\r\n\r\n    if (value % 2 === 0) {\r\n      if (value % 4 === 0) {\r\n        console.log(ball);\r\n        if (strike === \"strike\") {\r\n          setFour1(four1 + 1);\r\n        } else if (nonstrike === \"strike\") {\r\n          setFour2(four2 + 1);\r\n        }\r\n      }\r\n      if (value % 6 === 0) {\r\n        if (strike === \"strike\") {\r\n          setSix1(six1 + 1);\r\n        } else if (nonstrike === \"strike\") {\r\n          setSix2(six2 + 1);\r\n        }\r\n      }\r\n\r\n      if (strike === \"strike\") {\r\n        setBallTracker1(balltracker1 + value);\r\n        setCountBall1(countBall1 + 1);\r\n        setStrike(\"strike\");\r\n        setNonStrike(\"\");\r\n        //   console.log(strike)\r\n        if (ball === 0) {\r\n          console.log(\"ball fsdfgd\");\r\n          if (strike === \"strike\") {\r\n            setStrike(\"\");\r\n            setNonStrike(\"strike\");\r\n          } else if (nonstrike === \"strike\") {\r\n            setNonStrike(\"\");\r\n            // setStrike(\"strike\");\r\n          }\r\n        }\r\n      } else if (nonstrike === \"strike\" && strike === \"\") {\r\n        setBallTracker2(balltracker2 + value);\r\n        setCountBall2(countBall2 + 1);\r\n      }\r\n    } else {\r\n      if (strike === \"strike\") {\r\n        setBallTracker1(balltracker1 + value);\r\n        setCountBall1(countBall1 + 1);\r\n        setStrike(\"\");\r\n        setNonStrike(\"strike\");\r\n      } else {\r\n        setBallTracker2(balltracker2 + value);\r\n        setCountBall2(countBall2 + 1);\r\n        setStrike(\"strike\");\r\n        setNonStrike(\"\");\r\n      }\r\n    }\r\n    //console.log(ball)\r\n  };\r\n\r\n  const redoHandler = (e) => {\r\n    setRedoCount(redoCount + 1);\r\n    if (score <= 0 || ball === 6) {\r\n      alert(\"redo not possiable\");\r\n      return;\r\n    }\r\n    if (redoCount >= 1 && score <= 0) {\r\n      alert(\"1 time redo possible\");\r\n      return;\r\n    }\r\n    let lastValue = lastClicked.pop();\r\n    console.log(redoCount);\r\n    setScore(score - lastValue);\r\n    console.log(redoCount);\r\n  };\r\n  const undoHandler = () => {\r\n    if (lastClicked.length <= 0) {\r\n      alert(\"undo not possiable\");\r\n      return;\r\n    }\r\n    let countBall = parseInt(ball);\r\n    let getScore = parseInt(score);\r\n    let lastValue = lastClicked.pop();\r\n    setScore(getScore - lastValue);\r\n  };\r\n\r\n  const noBallHandler = () => {\r\n    setBall(ball);\r\n    setScore(score + 1);\r\n  };\r\n  const wideHandler = () => {\r\n    if (ball === 0) {\r\n      alert(\"over is ended\");\r\n      return;\r\n    }\r\n    setScore(score + 1);\r\n  };\r\n  const outHandler = () => {\r\n    setShowButton(false);\r\n    if (ball === 0) {\r\n      return false;\r\n    }\r\n    let l = batsman.length;\r\n    if (l < 2) {\r\n      alert(\"plz add two batsman on strike\");\r\n      return;\r\n    }\r\n    if (bowler === \"\") {\r\n      alert(\"plz select bowlwer\");\r\n      return;\r\n    }\r\n    // console.log(strike)\r\n    if (strike === \"strike\") {\r\n      // console.log(batsman1)\r\n      console.log(batsman.length);\r\n      batsman.shift();\r\n      console.log(batsman.length);\r\n      setBatsman1(\"out\");\r\n      setBall(ball - 1);\r\n      balltracker1 = 0;\r\n      setBallTracker1(balltracker1);\r\n      //countBall1=0\r\n      setCountBall1(0);\r\n    } else {\r\n      console.log(\"=====>\" + nonstrike);\r\n      batsman.splice(1, 1);\r\n      console.log(batsman2);\r\n      setBatsman2(\"out\");\r\n      balltracker2 = 0;\r\n      setBallTracker2(balltracker2);\r\n      setBall(ball - 1);\r\n      //countBall2=0\r\n      setCountBall2(0);\r\n    }\r\n  };\r\n\r\n  const createMatch = () => {\r\n    let team1_id = id[0];\r\n    let team2_id = id[1];\r\n    let match_type = over;\r\n    console.log(team1_id, team2_id, location, over);\r\n\r\n    async function AddMatch() {\r\n      try {\r\n        fetch(`https://fast-atoll-73668.herokuapp.com/createMatch`, {\r\n          method: \"post\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            team1_id,\r\n            team2_id,\r\n            location,\r\n            match_type,\r\n          }),\r\n        })\r\n          .then((res) => res.json())\r\n          .then((data) => {\r\n            alert(data.message);\r\n            if (data.statusCode === 200) {\r\n              setCreated(true);\r\n            }\r\n          })\r\n          .catch((e) => {\r\n            console.log(e);\r\n          });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    AddMatch();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h5 className=\"text-center\">score board </h5>\r\n      <div className=\"col-md-10 mx-auto \">\r\n        {loading}\r\n        <div className=\"row mx-auto\">\r\n          <div className=\"row\">\r\n            {team1.team_name}\r\n            <input\r\n              type=\"checkbox\"\r\n              value={team1._id}\r\n              className=\"m-2\"\r\n              onChange={checkBoxHandler}\r\n            />\r\n            {team2.team_name}\r\n            <input\r\n              type=\"checkbox\"\r\n              value={team2._id}\r\n              className=\"m-2\"\r\n              onChange={checkBox2Handler}\r\n            />\r\n          </div>\r\n          <div className=\"row m-3\">\r\n            <select multiple={true} className=\"m-2\" onChange={multiSelect}>\r\n              {\" \"}\r\n              <option disabled>Player Name</option>\r\n              {list1.map((element, index) => (\r\n                <option key={index} value={element.name} name={element._id}>\r\n                  {element.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            <select\r\n              multiple={true}\r\n              className=\"m-2\"\r\n              onChange={multiSelectBowler}\r\n            >\r\n              <option value=\"\" disabled>\r\n                Player Name\r\n              </option>\r\n              {list2.map((element, index) => (\r\n                <option key={index} value={element.name} name={element._id}>\r\n                  {element.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <h6 className=\"m-5\">total over</h6>\r\n            <select className=\"\" onChange={overHandler}>\r\n              <option value=\"\">Selct Over</option>\r\n              <option value=\"5\">5</option>\r\n              <option value=\"10\">10</option>\r\n              <option value=\"15\">15</option>\r\n              <option value=\"20\">20</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h5>Enter the Location</h5>\r\n          <input type=\"text\" onChange={(e) => setLocation(e.target.value)} />\r\n        </div>\r\n        <div style={{ float: \"right\" }}>\r\n          <button className=\"btn btn-danger\" onClick={() => createMatch()}>\r\n            create match\r\n          </button>\r\n        </div>\r\n        <br />\r\n        <br />\r\n\r\n        {created ? (\r\n          <div>\r\n            <button\r\n              onClick={(e) => startMatch()}\r\n              className=\"btn btn-success\"\r\n              style={{ float: \"right\" }}\r\n            >\r\n              start Game\r\n            </button>\r\n            <button onClick={() => overcount()}>overcount</button>\r\n            <div>\r\n              <h5>ScoreBoard</h5>\r\n\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Player Name</th>\r\n                    <th>Run</th>\r\n                    <th>4s</th>\r\n                    <th>6s</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>\r\n                      {batsman1}\r\n                      {\".........\"}\r\n                      {strike}\r\n                    </td>\r\n                    <td>\r\n                      {balltracker1}({countBall1})\r\n                    </td>\r\n                    <td>{four1}</td>\r\n                    <td>{six1}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      {batsman2}\r\n                      {\".........\"}\r\n                      {nonstrike}\r\n                    </td>\r\n                    <td>\r\n                      {balltracker2}({countBall2})\r\n                    </td>\r\n                    <td>{four2}</td>\r\n                    <td>{six2}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n            {showButton ? <div></div> : \" \"}\r\n            <div>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Bowler Name</th>\r\n                    <th>ball</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>{bowler}</td>\r\n                    <td>{6 - ball}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n\r\n            {/* //ball layout */}\r\n            <div className=\"mt-3\">\r\n              <div className=\"col-md-5 mt-3 mx-auto\">\r\n                <h5>innnig ball is ..{totalBall}</h5>\r\n                <h5>innng over is ..{Math.floor(totalBall / 6)}</h5>\r\n                <h5>total Match ball is {matchBall}</h5>\r\n                <h5>total Match over is is {Math.floor(matchBall / 6)}</h5>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={score}\r\n                    readOnly\r\n                  />\r\n                  <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\">BallLeft</span>\r\n                    <span className=\"input-group-text\">{ball}</span>\r\n                  </div>\r\n                </div>\r\n\r\n                <table className=\"table\">\r\n                  <tbody>\r\n                    <tr></tr>\r\n                    <tr>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-info p-2\"\r\n                          value=\"1\"\r\n                          onClick={(e) => {\r\n                            clickHandler(e);\r\n                          }}\r\n                        >\r\n                          1\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-info\"\r\n                          value=\"2\"\r\n                          onClick={(e) => {\r\n                            clickHandler(e);\r\n                          }}\r\n                        >\r\n                          2\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-info\"\r\n                          value=\"3\"\r\n                          onClick={(e) => {\r\n                            clickHandler(e);\r\n                          }}\r\n                        >\r\n                          3\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-success\"\r\n                          value=\"4\"\r\n                          onClick={(e) => {\r\n                            clickHandler(e);\r\n                          }}\r\n                        >\r\n                          4\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger\"\r\n                          value=\"6\"\r\n                          onClick={(e) => {\r\n                            clickHandler(e);\r\n                          }}\r\n                        >\r\n                          6\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger\"\r\n                          value=\"\"\r\n                          onClick={(e) => {\r\n                            outHandler(e);\r\n                          }}\r\n                        >\r\n                          out\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-info\"\r\n                          value=\"1\"\r\n                          onClick={(e) => {\r\n                            wideHandler(e);\r\n                          }}\r\n                        >\r\n                          wide\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-info\"\r\n                          value=\"1\"\r\n                          onClick={(e) => {\r\n                            noBallHandler(e);\r\n                          }}\r\n                        >\r\n                          no ball\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-info\"\r\n                          value=\"\"\r\n                          onClick={(e) => {\r\n                            redoHandler(e);\r\n                          }}\r\n                        >\r\n                          Redo\r\n                        </button>\r\n                      </td>\r\n                      <td>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn btn-info\"\r\n                          value=\"\"\r\n                          onClick={() => {\r\n                            undoHandler();\r\n                          }}\r\n                        >\r\n                          Undo\r\n                        </button>\r\n                      </td>\r\n                    </tr>\r\n                    {ball ? null : (\r\n                      <tr className=\"text-center\">\r\n                        <td>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-info\"\r\n                            value=\"\"\r\n                          >\r\n                            Submit\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \" \"\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ScoreBoard;\r\n",["55","56"],"E:\\Game\\my-app\\src\\Component\\StateFull.js",[],"E:\\Game\\my-app\\src\\Component\\Management.js",["57","58","59","60","61"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\nfunction Management(props) {\r\n  let [teamList, setTeamList] = useState([]); //add list of team\r\n  let [playerList, setPlayerList] = useState([]); //add all the team player\r\n  let [loading, setLoading] = useState(\"loading....\");\r\n  let [team1, setTeam1] = useState([]); //store the team1 members\r\n  let [team2, setTeam2] = useState([]); //store the team2 members\r\n  let [id, setIds] = useState([]);\r\n  let [teamValue, setTeamValue] = useState([]); //dropdown list of player team1\r\n  let [teamValue2, setTeamValue2] = useState([]); //dropdown list of player team2\r\n  const [selected, setSelected] = useState([]); //select the two batsman\r\n  const [selected2, setSelected2] = useState([]); //select the bowler\r\n  useEffect(() => {\r\n    async function getTeam() {\r\n      try {\r\n        let res = await axios.get(\r\n          `https://fast-atoll-73668.herokuapp.com/fetchTeam`\r\n        );\r\n        setTeamList(res.data.message);\r\n        setLoading(\"\");\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n    getTeam();\r\n  }, []);\r\n\r\n  async function getList(team_id) {\r\n    try {\r\n      console.log(team_id);\r\n      fetch(`https://fast-atoll-73668.herokuapp.com/getPlayerList`, {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          team_id,\r\n        }),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPlayerList((preValue) => {\r\n            return [...preValue, data.player_list];\r\n          });\r\n        })\r\n\r\n        .catch((e) => console.log(e));\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  const checkBoxHandler = (e) => {\r\n    console.log(\" ==== \", e.target.checked);\r\n    if (playerList.length > 1) {\r\n      alert(\"you can perform match maximum two team \");\r\n      return false;\r\n    }\r\n\r\n    const { checked, value } = e.target;\r\n    setIds((preValue) => {\r\n      return [...preValue, value];\r\n    });\r\n    getList(value);\r\n  };\r\n  const getPlayer = () => {\r\n    console.log(playerList);\r\n    setTeam1(playerList[0]);\r\n    console.log(\"\");\r\n    setTeam2(playerList[1]);\r\n    //console.log(playerList[0]);\r\n    //console.log(playerList[1]);\r\n    playerList[0].map((elel) =>\r\n      setTeamValue((pre) => {\r\n        return [...pre, { label: elel.name, value: elel.player_id }];\r\n      })\r\n    );\r\n    playerList[1].map((elel1) =>\r\n      setTeamValue2((prev) => {\r\n        return [...prev, { label: elel1.name, value: elel1.player_id }];\r\n      })\r\n    );\r\n    //teamValue;\r\n  };\r\n  const handler = (e) => {\r\n    console.log(e.target);\r\n    console.log(e.target.name, e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"col-md-10\">\r\n        <div>\r\n          {loading}\r\n          <div className=\"row\">\r\n            {teamList.map((elelment, index) => (\r\n              <div key={index} className=\"m-2\">\r\n                <h5>{elelment.team_name}</h5>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  value={elelment._id}\r\n                  className=\"m-2\"\r\n                  label=\"22\"\r\n                  onChange={checkBoxHandler}\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          {playerList.map((element, index) => (\r\n            <select key={index} className=\"m-2\">\r\n              <option value=\"\" disabled>\r\n                Player Name\r\n              </option>\r\n              {element.map((val, index) => (\r\n                <option key={index}>{val.name} </option>\r\n              ))}\r\n            </select>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <button className=\"btn btn-success\" onClick={() => getPlayer()}>\r\n        Start Match\r\n      </button>\r\n\r\n      {/* player list of both team */}\r\n      <div className=\" row m-4 \">\r\n        <h6>Select Player </h6>\r\n\r\n        <MultiSelect\r\n          className=\"m-4\"\r\n          options={teamValue}\r\n          value={selected}\r\n          onChange={setSelected}\r\n          labelledBy={\"Select\"}\r\n        />\r\n        <MultiSelect\r\n          className=\"m-4\"\r\n          options={teamValue2}\r\n          value={selected2}\r\n          onChange={setSelected2}\r\n          labelledBy={\"Select\"}\r\n        />\r\n      </div>\r\n      {/* listing of the player name */}\r\n      {/* <div className=\"row m-2\">\r\n        <select className=\"m-2\" multiple={true} onChange={handler}>\r\n          <option value=\"\" disabled>\r\n            Player Name\r\n          </option>\r\n          {team1\r\n            ? team1.map((val, index) => (\r\n                <option key={index} value={val.player_id} name={val.name}>\r\n                  {val.name}{\" \"}\r\n                </option>\r\n              ))\r\n            : \" \"}\r\n        </select>\r\n        <select className=\"m-2\" multiple={true} onChange={handler}>\r\n          <option disabled>Player Name</option>\r\n          {team2\r\n            ? team2.map((val, index) => (\r\n                <option\r\n                  key={index}\r\n                  name={val.name}\r\n                  value={val.player_id}\r\n                  id=\"5\"\r\n                >\r\n                  {val.name}\r\n                </option>\r\n              ))\r\n            : \" \"}\r\n        </select>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Management;\r\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":14},{"ruleId":"66","severity":1,"message":"70","line":6,"column":8,"nodeType":"68","messageId":"69","endLine":6,"endColumn":18},{"ruleId":"66","severity":1,"message":"71","line":76,"column":9,"nodeType":"68","messageId":"69","endLine":76,"endColumn":22},{"ruleId":"66","severity":1,"message":"72","line":27,"column":9,"nodeType":"68","messageId":"69","endLine":27,"endColumn":18},{"ruleId":"66","severity":1,"message":"73","line":5,"column":10,"nodeType":"68","messageId":"69","endLine":5,"endColumn":14},{"ruleId":"66","severity":1,"message":"74","line":14,"column":10,"nodeType":"68","messageId":"69","endLine":14,"endColumn":15},{"ruleId":"66","severity":1,"message":"75","line":14,"column":17,"nodeType":"68","messageId":"69","endLine":14,"endColumn":25},{"ruleId":"66","severity":1,"message":"72","line":366,"column":9,"nodeType":"68","messageId":"69","endLine":366,"endColumn":18},{"ruleId":"62","replacedBy":"76"},{"ruleId":"64","replacedBy":"77"},{"ruleId":"66","severity":1,"message":"78","line":9,"column":8,"nodeType":"68","messageId":"69","endLine":9,"endColumn":13},{"ruleId":"66","severity":1,"message":"79","line":10,"column":8,"nodeType":"68","messageId":"69","endLine":10,"endColumn":13},{"ruleId":"66","severity":1,"message":"80","line":11,"column":8,"nodeType":"68","messageId":"69","endLine":11,"endColumn":10},{"ruleId":"66","severity":1,"message":"81","line":63,"column":13,"nodeType":"68","messageId":"69","endLine":63,"endColumn":20},{"ruleId":"66","severity":1,"message":"82","line":88,"column":9,"nodeType":"68","messageId":"69","endLine":88,"endColumn":16},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ScoreBoard' is defined but never used.","'handleSubmit2' is assigned a value but never used.","'countBall' is assigned a value but never used.","'list' is assigned a value but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.",["83"],["84"],"'team1' is assigned a value but never used.","'team2' is assigned a value but never used.","'id' is assigned a value but never used.","'checked' is assigned a value but never used.","'handler' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]